{
  models: {
    widgets: {
      type: 'Schema',
      fullName: 'Widgets',
      other: {
        "actions": {
          "fields": {
            "update": {
              "permissions": "accessAsUser"
            },
            "delete": {
              "permissions": "accessAsUser"
            },
            "clone": {
              "permissions": "accessAsUser"
            },
            "viewDetails": {
              "permissions": "accessAsUser"
            },
            "view": {
              "permissions": "accessAsUser"
            },
            "create": {
              "permissions": "accessAsUser"
            },
            getCode: {
              description: "Get Widget Code",
              icon: {
                type: "font-awesome",
                link: "code",
              },
              action: {
                type: "action",
                link: "getCode"
              }
            }
          }
        },
        "scopes": {
          "ownRecordScope": {
            "permissions": "accessAsUser",
            "where": "{creator: {$eq: this.req.user._id}}"
          }
        }
      }        ,
      fields: {
        id: {
          type: 'String',
          fullName: 'Widget Id',
          description: 'Widget ID',
          other: {
              "formRender": {
                  "formRenderer": "id24"
              },
              "render": "asIs",
              "synthesize": "id24",
              "show": "$action !== 'create' && $action !== 'clone'",
              "unique": true
          }
        },
        name: {
          type: 'String',
          fullName: 'Widget Name',
          description: 'Name given to the instance of the widget',
          required: true
        },
        type: {
          type: 'String',
          fullName: 'Widget Type',
          description: 'Select the type of widget to configure',
          required: true,
          list: {
            values: {
              drugInteraction: "drugInteraction",
              questionnaire: "questionnaire",
              adverseEvents: "adverseEvents",
              recalls: "recalls",
              ucsfRecalls: "ucsfRecalls",
              drugsVisualization: "drugsVisualization",
              ndcLookup: "ndcLookup",
              adverseEventsAlt: "adverseEventsAlt",
              graphViewWidget: "graphViewWidget",
              preferences: "preferences"
            },
            scopes: {
                        "userScope": {
                          "permissions": {
                            "view": "accessAsUser"
                          },
                          "where": "return true",
                          "return": "return $list"
                        }
                      }
          }
        },
        fontSize: {
          type: 'Number',
          fullName: 'Font Size',
          description: 'Font size in pixels to apply to text',
          list: {
            values: {
              "12": "12",
              "13": "13",
              "14": "14",
              "16": "16",
              "18": "18",
              "20": "20",
              "22": "22",
              "24": "24",
              "26": "26",
              "28": "28"
            },
            scopes: {
                        "userScope": {
                          "permissions": {
                            "view": "accessAsUser"
                          },
                          "where": "return true",
                          "return": "return $list"
                        }
                      }
          }
        },
        fontFace: {
          fullName: 'Font Type',
          description: 'Type of font applied to text',
          list: {
            values: {
              Arial: "Arial",
              Helvetica: "Helvetica",
              "Times New Roman": "Times New Roman",
              Verdana: "Verdana",
              Georgia: "Georgia",
              Garamond: "Garamond",
              Palatino: "Palatino",
              Bookman: "Bookman",
              "Comic Sans MS": "Comic Sans MS",
              Impact: "Impact",
              Courier: "Courier"
            },
            scopes: {
                        "userScope": {
                          "permissions": {
                            "view": "accessAsUser"
                          },
                          "where": "return true",
                          "return": "return $list"
                        }
                      }
          }
        },
        fontStyle: {
          type: 'String[]',
          fullName: 'Font Style',
          description: 'Font style applied to text',
          list: {
            values: {
              bold: "bold",
              italic: "italic",
              underline: "underline",
              strikeout: "strikeout",
              none: "none",
            },
            scopes: {
                        "userScope": {
                          "permissions": {
                            "view": "accessAsUser"
                          },
                          "where": "return true",
                          "return": "return $list"
                        }
                      }
          },
          parameters: {visible: false}
        },
        welcomeText: {
          type: 'String',
          fullName: 'Questionnaire Welcome Text',
          description: 'Text presented at the beginning of a  questionnaire',
          other: {
            show: 'row[\'type\']==\'questionnaire\'',
            showInDatatable: false
          },
          parameters: {visible: false}
        },
        thankYouText: {
          type: 'String',
          fullName: 'Questionnaire Completion Text',
          description: 'Text presented upon completion of a questionnaire',
          other: {
            show: 'row[\'type\']==\'questionnaire\'',
            showInDatatable: false
          },
          parameters: {visible: false}
        },
        attractionForce: {
          type: 'Number',
          fullName: 'Attraction Force',
          other: {
            show: 'row[\'type\']==\'drugsVisualization\'',
            showInDatatable: false
          },
          parameters: {visible: false}
        },
        repulsionForce: {
          type: 'Number',
          fullName: 'Repulsion Force',
          other: {
            show: 'row[\'type\']==\'drugsVisualization\'',
            showInDatatable: false
          },
          parameters: {visible: false}
        },
        showDiagnosis: {
          type: 'Boolean',
          fullName: 'Show Diagnosis',
          other: {
            show: 'row[\'type\']==\'drugsVisualization\'',
            showInDatatable: false
          },
          parameters: {visible: false}
        },
        showIngredients: {
          type: 'Boolean',
          fullName: 'Show Ingredients',
          other: {
            show: 'row[\'type\']==\'drugsVisualization\'',
            showInDatatable: false
          },
          parameters: {visible: false}
        },
        showPharmaClass: {
          type: 'Boolean',
          fullName: 'Show Pharma Class',
          other: {
            show: 'row[\'type\']==\'drugsVisualization\'',
            showInDatatable: false
          },
          parameters: {visible: false}
        },
        showPhysiologicEffect: {
          type: 'Boolean',
          fullName: 'Show Physiologic Effect',
          other: {
            show: 'row[\'type\']==\'drugsVisualization\'',
            showInDatatable: false
          },
          parameters: {visible: false}
        },
        algorithm: {
          list: {
            values: {
              openfda: "OpenFDA",
              conceptant: "Conceptant"
            },
            scopes: {
                        "userScope": {
                          "permissions": {
                            "view": "accessAsUser"
                          },
                          "where": "return true",
                          "return": "return $list"
                        }
                      }
          },
          other: {
            permissions: {
              read: "accessAsSuperAdmin", 
              write: "accessAsSuperAdmin"
            }
          }
        },
        dataSource: {
          type: 'String',
          fullName: 'Data source',
          description: 'Patient data source selector',
          list: {
            values: {
              userPreferences: "User Preferences",
              stu3: "STU3",
              dstu2: "DSTU2",
              epicStu3WithOauth2: "EPIC STU3 with OAuth2 and Launch Code From the Current Session",
              epicStu3WithOauth2AndLaunchCode: "EPIC STU3 with OAuth2 And Launch Code From the Endpoint"
            },
            scopes: {
                        "userScope": {
                          "permissions": {
                            "view": "accessAsUser"
                          },
                          "where": "return true",
                          "return": "return $list"
                        }
                      }
          }
        },
        epicStu3WithOauth2AndLaunchCodeAuth: {
          type: 'Boolean',
          fullName: 'Use Login and password for EPIC Launch Code API',
          other: {
            show: ' _.get(this, "row.dataSource")=="epicStu3WithOauth2AndLaunchCode"'
          },
          parameters: {visible: false}
        },
        epicStu3WithOauth2AndLaunchCodeAuthLogin: {
          fullName: 'EPIC Launch Code API Login',
          other: {
            show: ' _.get(this, "row.dataSource")=="epicStu3WithOauth2AndLaunchCode" && _.get(this, "row.epicStu3WithOauth2AndLaunchCodeAuth")'
          },
          parameters: {visible: false}
        },
        epicStu3WithOauth2AndLaunchCodeAuthPassword: {
          fullName: 'EPIC Launch Code API Password',
          other: {
            show: ' _.get(this, "row.dataSource")=="epicStu3WithOauth2AndLaunchCode" && _.get(this, "row.epicStu3WithOauth2AndLaunchCodeAuth")'
          },
          parameters: {visible: false}
        },
        epicClientId: {
          fullName: 'EPIC Client ID',
          other: {
            show: ' _.get(this, "row.dataSource")=="epicStu3WithOauth2AndLaunchCode" || _.get(this, "row.dataSource")=="epicStu3WithOauth2"'
          },
          parameters: {visible: false}
        },
        epicLaunchCode: {
          fullName: 'EPIC Launch Code (for tests only)',
          description: 'In production this parameter must be specified in the load tag',
          other: {
            show: ' _.get(this, "row.dataSource")=="epicStu3WithOauth2"'
          },
          parameters: {visible: false}
        },
        stu3Url: {
          type: 'String',
          fullName: 'STU3 Fhir url',
          description: 'STU3 Fhir url',
          other: {
            show: 'row[\'dataSource\']==\'stu3\''
          },
          parameters: {visible: false}
        },
        dstu2Url: {
          type: 'String',
          fullName: 'DSTU2 Fhir url',
          description: 'DSTU2 Fhir url',
          other: {
            show: 'row[\'dataSource\']==\'dstu2\''
          },
          parameters: {visible: false}
        },
        fhirDataImport: {
          type: 'Boolean',
          fullName: 'FHIR data import',
          description: 'Select to allow pulling data from a FHIR server',
          other: {
            show: 'row[\'type\']==\'preferences\''
          },
          parameters: {visible: false}
        }
      }
    },
    users: {
      type: 'Schema',
      fullName: 'Widgets Users',
      description: 'Widgets Users',
      other: {
        singleRecord: false,
        limitReturnedRecords: 1000000,
        "defaultSortBy": {
          "userName": 1
         },
        "actions": {
          "fields": {
            "update": {
              "permissions": "accessAsSuperAdmin"
            },
            "delete": {
              "permissions": "accessAsSuperAdmin"
            },
            "clone": {
              "permissions": "accessAsSuperAdmin"
            },
            "viewDetails": {
              "permissions": "accessAsUser"
            },
            "view": {
              "permissions": "accessAsUser"
           },
            "create": {
              "permissions": "accessAsSuperAdmin"
            }
          }
        },
        "scopes": {
          "allScope": {
            "permissions": "accessAsUser",
            "where": "true"
          }
        }
      },
      fields: {
        userName: {
          type: 'String',
          fullName: 'Employee Name',
          description: 'First and Last Name of Employee',
          required: '$action == \'update\''
        },
        login: {
          type: 'String',
          fullName: 'User Login',
          description: 'User Login'
        },
        password: {
          type: 'String',
          fullName: 'User Password',
          description: 'User Password'
        },
        contactPhone: {
          type: 'Phone',
          fullName: 'Contact Phone',
          description: 'Contact Phone'
        },
        email: {
          type: 'Email',
          fullName: 'Email',
          description: 'Email'
        }
      }
    }
  },
  'interface': {
    skin: {
      other: 'smart-style-6'
    },
    app: {
      title: {
        other: 'Widget Manager'
      },
      slogan: {
        other: 'Widget Manager'
      },
      name: {},
      description: {
        other: 'Widget Manager'
      },
      keywords: {
        other: 'Widget Manager'
      },
      theme: {
        other: 'default'
      },
      permissions: {
        other: {
          allowEditingJobs: { description: "allowEditingJobs"},
          allowEditingSettings: { description: "allowEditingSettings"},
          accessAsGuest: { description: "accessAsGuest"},
          accessAsUser: { description: "accessAsUser"},
          accessAsSuperAdmin: { description: "accessAsSuperAdmin"},
          createUserAccounts: { description: "createUserAccounts"},
          accessFromDesktop: { description: "accessFromDesktop"},
          accessFromTv: { description: "accessFromTv"},
          accessFromTablet: { description: "accessFromTablet"},
          accessFromPhone: { description: "accessFromPhone"},
          accessFromBot: { description: "accessFromBot"},
          accessFromCar: { description: "accessFromCar"}
        }
      },
      auth: {
        requireAuthentication: {
          other: true
        },
        enableAuthentication: {
          other: true
        },
        enableRegistration: {
          other: false
        },
        enablePermissions: {
          other: true
        },
        enableUserPasswordReset: {
          other: true
        },
        enableMfa: {
          other: false
        },
        requireMfa: {
          other: false
        }
      },
      logo: {
        tiny: {
          other: '/public/logos/hc-logo.png'
        },
        small: {
          other: '/public/logos/hc-logo.png'
        },
        large: {
          other: '/public/logos/hc-logo.png'
        }
      },
      favicon: {
        '180x180': {},
        '32x32': {},
        '16x16': {},
        manifest: {},
        maskIcon: {}
      },
      header: {
        visible: {
          other: true
        },
        components: {
          logo: {
            other: false
          },
          alerts: {
            other: false
          },
          projectSelector: {
            other: false
          },
          languageSelector: {
            other: false
          },
          fullScreenToggle: {
            other: false
          },
          search: {
            other: false
          },
          logoutButton: {
            other: true
          },
          menuToggle: {
            other: false
          }
        }
      },
      footer: {
        visible: {
          other: true
        },
        components: {
          copyright: {
            other: true
          },
          copyrightText: {
            other: '2018 Conceptant Inc.'
          },
          lastAccountActivity: {
            other: false
          },
          status: {
            other: false
          }
        }
      }
    },
    layout: {
      fixed: {
        header: {
          other: false
        },
        navigation: {
          other: true
        },
        ribbon: {
          other: false
        },
        footer: {
          other: false
        }
      },
      fixedWidth: {
        other: false
      },
      rtlSupport: {
        other: false
      },
      menuPosition: {
        other: 'top'
      },
      fixedNavigation: {
        other: true
      },
      showDemoControls: {
        other: false
      }
    },
    mainMenu: {
      type: 'Menu',
      fullName: 'Main Menu',
      'default': '/home',
      fields: {
        widgets: {
          type: 'MenuItem',
          fullName: 'Widgets',
          link: '/widgets',
          icon: {
            type: 'font-awesome',
            link: 'fire'
          }
        },
        users: {
          type: 'MenuItem',
          fullName: 'Users',
          other: { 
            "scopes": {
              "adminScope": {
                "permissions": ["accessAsSuperAdmin", "accessFromDesktop"]
              }
            }
          },
          link: '/users',
          icon: {
            type: 'font-awesome',
            link: 'user'
          }
        }
      }
    },
    pages: {
      home: {
        fullName: 'Home',
        link: '/home',
        template: '<div style="max-width: 94%;margin: 0 auto;"><p> <center><img src="https://widget-manager-backend.conceptant.com/public/logos/hc-logo-full.png" width="140" height="139" alt="Healthy Citizen"/><strong><b><h1>HEALTHY CITIZEN WIDGET INFORMATION CENTER&nbsp;</h1></center></strong></b></p>\n<p><center><h2>HOW TO EXPLORE THE WIDGETS AND APIS?</h2></center></p>\n<blockquote>\n  <blockquote>\n    <p>If your organization wants to explore the Healthy Citizen offerings, in more detail, there are currently two methods available. </p>\n    <blockquote>\n      <p><h3>1) Explore currently available Healthy Citizen Widgets </h3></p>\n      <blockquote>\n        <p> This is done by Implementing a sample site with various widgets preconfigured in your infrastructure to better understand how to integrate the HC widgets into your solutions. There are two parts to this exploration platform. The first is an instance of the widget manager solution where an administrator configures the widgets they wish to implement. The second is a portal that allows for users to register and view the configured widgets using data from either preferences or directly pulling data from FHIR servers (STU2 or STU3). Follow the steps below to implement this exploration platform in your infrastructure. </p>\n        <blockquote>\n          <p><u><h4>Widget Manager Platform</h4> </u></p>\n          <ol>\n            <li>Obtain the Widget Manager Platform Docker containers on DockerHub here - <a href="https://hub.docker.com/r/conceptant/hc-widget-manager/" target="new">https://hub.docker.com/r/conceptant/hc-widget-manager/</a></li>\n            <li>Follow the instructions on how to “Install the Docker Container” on one of your servers. </li>\n            <li>Configure the existing widget data sources using the instructions in the section below called “How to Install a Widget”. </li>\n          </ol>\n          <p><u><h4>Example External Partner Portal</h4> </u></p>\n          <ol>\n            <li>Obtain the example external partner portal Docker containers on DockerHub here - <a href="https://hub.docker.com/r/conceptant/hc-widget-demo/" target="new">https://hub.docker.com/r/conceptant/hc-widget-demo/</a> \n              </p>\n            </li>\n            <li>Follow the instructions on how to “Install the Docker Container” on one of your servers. \n              </p>\n            </li>\n            <li>Create one or more users in the external partner portal with existing FHIR patient records, including the FHIR server credentials. \n              </p>\n            </li>\n            <li>View the widgets being invoked/configured from the Widget Manager and pulling data from your FHIR resources, interacting with FDA product data and presenting the personalized results in the widgets. \n              </p>\n            </li>\n          </ol>\n        </blockquote>\n      </blockquote>\n      <p><h3>2) Explore currently available Healthy Citizen APIs</h3></p>\n      <ol>\n        <ol>\n          <li>Go to the Healthy Citizen API documentation located here - <a href="http://widget-manager-backend.healthycitizen.org/api-docs" target="new">http://widget-manager-backend.healthycitizen.org/api-docs</a></li>\n          <li>Follow the instructions at the top of the page to implement an authorization token.</li>\n          <li>Explore the existing REST API documentation, execute sample calls, and returned results. </li>\n          <li>If you prefer to use GraphQL interface instead of REST API, you can try it here: <a href="http://widget-manager-backend.healthycitizen.org/graphiql" target="new">http://widget-manager-backend.healthycitizen.org/graphiql</a>.</li>\n        </ol>\n      </ol>\n    </blockquote>\n  </blockquote>\n</blockquote>\n<p><center><strong><b><h1>HOW TO INSTALL A WIDGET?</h1></b></strong></center>&nbsp;</p>\n<blockquote>\n  <blockquote>\n    <p> Each widget is given it\'s own "Unique Identifier". To obtain the widget code for your specific installation, please hover over the widget you want to install and click "link" button. You will be asked for your account credentials. \n      To create a widget instance for your organization to use please follow the steps listed below: </p>\n    <ol>\n      <li>Click on the <a href="/#/widgets?action=create" target="new">CREATE NEW</a></li>\n      <li>Enter a name for your new widget (e.g., ABC Recall Widget) </li>\n      <li>Select the "Widget Type" from the drop down\n        Adjust the widget presentation parameters as necessary </li>\n      <li>Select the "Data Source" where the widget will receive the FDA regulated product information (e.g., user preferences, FHIR STU2, or FHIR STU3) and FHIR server URL. </li>\n      <li>Note: Healthy Citizen Widget are designed to support pulling Electronic Health Records (EHR) data for presenting a list of suggested FDA products, using either FHIR DSTU2 or FHIR STU3. See your EHR System Administrator if unsure which version of FHIR your EHR supports. </li>\n    </ol>\n  </blockquote>\n</blockquote>\n</div>'
      }
    }
  }
}