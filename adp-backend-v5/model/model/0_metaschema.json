{
  "metaschema": {
    "type": {
      "required": true,
      "default": "String",
      "list": [
        "Schema",
        "String",
        "Html",
        "Code",
        "Date",
        "Number",
        "Double",
        "Int32",
        "Int64",
        "Decimal128",
        "Boolean",
        "TriStateBoolean",
        "Mixed", // any structure, might be either primitive type or Object/Array
        "Object", // something with defined structure,
        "AssociativeArray",
        "ObjectID",
        "LookupObjectID",
        "Array",
        "TreeSelector",

        "String[]",
        "Date[]",
        "Number[]",
        "Double[]",
        "Int32[]",
        "Int64[]",
        "Decimal128[]",
        "Boolean[]",
        "TriStateBoolean[]",
        "Mixed[]",
        "Object[]",
        "ObjectID[]",
        "LookupObjectID[]",

        "Image",
        "Video",
        "Audio",
        "File",
        "Image[]",
        "Video[]",
        "Audio[]",
        "File[]",

        "Menu",
        "MenuGroup",
        "MenuItem",
        "MenuDashboardLink",
        "Dashboard",
        "DashboardItem",
        "Group",
        "Location",
        "Grid",
        "Password",
        "Email",
        "Phone",
        "Url",
        "Text",
        "ImperialHeight",
        "ImperialWeight",
        "ImperialWeightWithOz",
        "BloodPressure",
        "Time",
        "DateTime",
        "DateTime[]",
        "DynamicList",
        "Barcode",
        "Currency",
        "List",
        "List[]",
        "Blank",
        "StaticHtml",
        "CronExpression",
        "FormSeparator"
      ],
      "fullName": "Type",
      "description": "The type of the value. It has no default, so you always have to specify it. Also do not use schema attribute name 'type'. Some types are only available for interface elements and not the model"
    },
    "subtype": {
      "list": [
        "Location",
        "Password",
        "Email",
        "Phone",
        "Url",
        "Text",
        "ImperialHeight",
        "ImperialWeight",
        "ImperialWeightWithOz",
        "BloodPressure",
        "Date",
        "Time",
        "DateTime",
        "DynamicList",
        "Barcode"
      ],
      "fullName": "Field Subtype",
      "description": "Overrides default field visual representation. For instance for type String the default input type is TEXT, but can be overridden here to be PASSWORD"
    },
    "width": {
      "default": 100,
      "fullName": "Width",
      "description": "Width of the field as rendered in the datatables",
      "comment": "TODO: discuss with the team and decide if UI attributes should be grouped. For instance 'ui':{width:100,height:200,style:'best'}"
    },
    "formWidth": {
      "default": 12,
      "fullName": "Form Width",
      "description": "Width of the field as rendered in in a form (col-md)"
    },
    "colspan": {
      "fullName": "Column Span",
      "description": "Defines what portion of a layout it should occupy",
      "comment": "TODO: discuss with the team and decide if UI attributes should be grouped. For instance 'ui':{width:100,height:200,style:'best', colspan:2}. Or get rid of this"
    },
    "responsivePriority": {
      "default": 100,
      "fullName": "Responsive Priority",
      "description": "Defines the priority of this field being hidden in datatables as described here: https://js.devexpress.com/Documentation/ApiReference/UI_Widgets/dxDataGrid/Configuration/columns/#hidingPriority (the lower the priority, the sooner the column will be hidden in narrow windows)"
    },
    "labelRenderer": {
      "fullName": "Label Renderer",
      "comment": "depreciate this in favor of synthetic fields",
      "description": "Name of the function from LabelRenderers rendering label representing given object. This is used in parent select lists and similar, for instance see encounters."
    },
    "singleRecord": {
      "fullName": "Single Record",
      "type": "Boolean",
      "description": "Requires special treatment in UI since only one record will be returnedm not need to show datatables"
    },
    "title": {
      "fullName": "Title",
      "description": "The title of the dashboard item or similar tile"
    },
    "icon": {
      "fullName": "Icon",
      "description": "Icon associated with a given item (for instance menu item)",
      "fields": {
        "type": {
          "description": "Icon type: font-awesome, in the future: image etc",
          "list": ["font-awesome", "image", "class"],
          "default": "font-awesome"
        }
      }
    },
    "link": {
      "fullName": "Link",
      "description": "The URL to be linked to a title. Can be a javascript or modal target for bringing up modal dialogs"
    },
    "linkLabel": {
      "fullName": "View All",
      "description": "The label of the link in a dashboard item or a tile"
    },
    "template": {
      "fullName": "Template",
      "description": "Template representing the dashboard item or tile or similar visual element",
      "supportsExternalData": true
    },
    "data": {
      "fullName": "Data",
      "description": "Data for various elements (for instance charts)",
      "supportsExternalData": true
    },
    "fullName": {
      "required": true,
      "fullName": "Full Name",
      "description": "Full name of the field in human-readable form"
    },
    "description": {
      "fullName": "Description",
      "description": "Description of the field meaning. This will be sent to the front-end"
    },
    "singleRecordName": {
      "fullName": "Single Record Name",
      "description": "Singular form of one record in the collection"
    },
    "permissions": {
      "fullName": "Permissions",
      "description": "Field permissions"
    },
    "temporary": {
      "fullName": "Temporary",
      "description": "If temporary then it should not be listed as a part of dictionary as this attribute is only used for MVP demo"
    },
    "default": {
      "fullName": "Default Value",
      "description": "Specifies the default value for this field if no value is provided"
    },
    "list": {
      "fullName": "List",
      "comment": "Lists all possible values of this attribute. List values may be retrieved asynchronously"
    },
    "comment": {
      "fullName": "Comment",
      "description": "Free-form text containing comments about this field, will not be visible to the users or sent to front-end"
    },
    "visible": {
      "default": true,
      "type": "Boolean",
      "fullName": "Visible",
      "description": "Determines if the field should be visible in the forms by default or not. Can be overridden in a specific form, but will be sent to the front-end"
    },
    "showInDatatable": {
      "default": true,
      "type": "Boolean",
      "fullName": "Show In Datatable",
      "description": "If set to true (default) then this field will be displayed in the datatables."
    },
    "showInViewDetails": {
      "default": true,
      "type": "Boolean",
      "fullName": "Show In Form of viewDetails action",
      "description": "If set to true (default) then this field will be displayed in the viewDetails action form."
    },
    "showInForm": {
      "default": true,
      "type": "Boolean",
      "fullName": "Show In Form",
      "description": "If set to true (default) then this field will be displayed in the form."
    },
    "showInGraphql": {
      "default": true,
      "type": "Boolean",
      "fullName": "Show In GraphQL",
      "description": "If set to true (default) then this field will be added to GraphQL type thus it can be present in Query."
    },
    "searchable": {
      "fullName": "Searchable",
      "type": "Boolean",
      "description": "If true then this field can be searched in order to fin right record in lookups, datatable searches and similar"
    },
    "serverSide": {
      "fullName": "Server-side",
      "type": "Boolean",
      "description": "If true then most of the handling for these records should be done by the server, i.e. server-side mode for datatables"
    },
    "required": {
      "fullName": "Required",
      "type": "Boolean",
      "description": "If the attribute is required then no part of the record can be submitted without this attribute"
    },
    "generated": {
      "fullName": "Generated",
      "type": "Boolean",
      "description": "If set to true than the field is hidden and its value will be take care of middleware. Can be set to array of function calls which will be called in order to generate the value",
      "comment": "This needs to be depreciated eventually in favor of synthetic fields"
    },
    "unique": {
      "fullName": "Unique",
      "type": "Boolean",
      "description": "If set to true then this attribute value have to be unique across entire collection. You don't need to specify index:true if unique:true"
    },
    "validate": {
      "fullName": "List of Validators",
      "description": "Validates the attribute value against validators specified in the array. Both simplified and advanced form of validators is supported, see 0_validatorShortcuts.json for translation specification"
    },
    "render": {
      "fullName": "Field Renderer",
      "description": "Renderers provide a way to render the data in a non-default way"
    },
    "exportRender": {
      "fullName": "Field Export Renderer",
      "description": "Same as 'render' but used then exporting to XLSX & CSV"
    },
    "formRender": {
      "fullName": "Field Renderer for the forms",
      "description": "Unlike 'render' this one is used in forms, not in datatables"
    },
    "synthesize": {
      "fullName": "Synthesize",
      "description": "Specifies a way to synthesize the field value. If field has this attribute it's treated as synthetic and doesn't require direct user input"
    },
    "virtual": {
      "fullName": "Virtual",
      "description": "Virtual fields is a special case of synthetic fields when the value of the field is not stored in the database, but calculated on the fly during the \"view\" action and other actions that read from the database. The virtual fields are calculated using the same synthesizers and are indicated with attribute \"virtual: true\"."
    },
    "errorMessages": {
      "fullName": "Error Messages",
      "description": "Error message templates to be used and returned by the validator"
    },
    "arguments": {
      "fullName": "Arguments",
      "description": "Arguments to be used in the validator"
    },
    "transform": {
      "fullName": "Transform",
      "description": "Lists array functions to be called to transform the data before storing it in the database. You can provide a 2-element array instead of one function to perform transformation before storing value into the database and after retrieving value from the database"
    },
    "schemaTransform": {
      "fullName": "Schema Transform",
      "description": "Lists array functions to be called to transform the model schema"
    },
    "fields": {
      "fullName": "Fields",
      "description": "List of included fields"
    },
    "index": {
      "fullName": "Index",
      "type": "Boolean",
      "description": "If true then the field need to be indexed"
    },
    "lookup": {
      "fullName": "Lookup",
      "description": "A way to link two collections and lookup for appropriate record in the foreign collection"
    },
    "limitReturnedRecords": {
      "fullName": "Limit Returned Records",
      "description": "If set to a number then no more than this number of records can be returned at once. Only applicable to schemas, nothing else."
    },
    "controller": {
      "fullName": "Controller",
      "description": "If set than this model will use custom controller named as specified in this attribute"
    },
    "defaultSortBy": {
      "default": {
        "_id": -1
      },
      "fullName": "Default Sort By",
      "description": "Unless specified otherwise in the query the backend will sort its GET queries based on this order"
    },
    "parameters": {
      "fulName": "Parameters",
      "description": "Various parameters specific for the given type of field"
    },
    "generatorDistribution": {
      "default": "random",
      "list": ["random", "sequential"],
      "fullName": "Distribution",
      "description": "How values from the range of possible values should be picked"
    },
    "menus": {
      "fields": {
        "type": {
          "list": ["MenuItem", "MenuGroup", "MenuDashboardLink"],
          "default": "MenuItem"
        }
      }
    },
    "app": {
      "fields": {
        "type": {
          "default": "ApplicationInterface"
        }
      }
    },
    "pages": {
      "fields": {
        "type": {
          "list": ["Page"],
          "default": "Page"
        }
      }
    },
    "show": {
      "fullName": "Show",
      "description": "Contains condition for showing this field"
    },
    "actions": {
      "fullName": "Actions",
      "required": false,
      "description": "Lists actions available for the schema records. Supported default actions: create, update, delete, view, viewDetails",
      "comment": "different actions may require different roles",
      "fields": {
        // TODO: move fields underneath fields
        "showInTable": {
          // Deprecated! replaced with showPosition
          "description": "Used in actions. If true then there should be a button in the datatables view linked to this action",
          "default": true
        },
        "position": {
          "list": ["grid.row", "grid.top.left", "grid.top.right"],
          "description": "Position, where to show action button",
          "default": "gridRow"
        },
        "actionOrder": {
          "type": "Number",
          "description": "Number to help order actions by",
          "default": 0
        },
        "locateInMenu": {
          "type": "String",
          "description": "Determine collapsing of the toolbar action button into drop menu, in case of narrow grid"
        },
        "permissions": {
          "type": "String[]",
          "default": "authenticated",
          "fullName": "Permissions",
          "description": "Lists permissions associated with given activity/data or role. One permission 'authenticated' is set for all logged-in users"
        },
        "icon": {
          "fullName": "Icon",
          "description": "Icon associated with a given Action",
          "fields": {
            "type": {
              "description": "Icon type: font-awesome, in the future: image etc",
              "list": ["font-awesome"],
              "default": "font-awesome"
            },
            "link": {
              "description": "the name of the font-awesome icon or link to the image representing the icon"
            }
          }
        },
        "fullName": {
          "description": "If set then this name will be displayed on the button as a label"
        },
        "description": {
          "description": "If set then this text will be displayed as hint for action button"
        },
        "action": {
          "fields": {
            "type": {
              "list": ["action", "link", "module"],
              "default": "action"
            },
            "link": {
              "type": "String"
            },
            "params": {
              "fields": {
                "changeType": {
                  "list": ["recorddeleted", "recordupdated", "recordcreated", "collectioncreated", "collectiondeleted"]
                },
                "minTimeBetweenReloads": {
                  "type": "Number"
                },
                "maxTimeBetweenReloads": {
                  "type": "Number"
                }
              }
            }
          }
        }
      }
    },
    "recordActionsLayout": {
      "default": "spread",
      "list": ["spread", "menu"],
      "fullName": "Record actions layout",
      "description": "The way actions appear in data grid row"
    },
    "scopes": {
      "fullName": "Scopes",
      "required": false,
      "description": "Lists scopes available for the schema records.",
      "comment": "Schemas have permissions specifying who can execute actions with records."
    },
    "hooks": {
      "fullName": "Hooks",
      "required": false,
      "description": "Hooks are functions located in model/helpers/hooks returning Promise and invoked before(section 'hooks.pre') or after(section 'hooks.post') action"
    },
    "autocomplete": {
      "fullName": "autocomplete",
      "required": false,
      "description": "Enable/disable browser automcomplete. Values = 'enable|disable|disableMobile. Attribute applies to text input fields and all derivatives."
    },
    "table": {
      "fullName": "table",
      "required": false,
      "description": "Contains specification for TreeSelector type"
    },
    "headerRender": {
      "fullName": "Header Renderer for Complex Types ang Groups",
      "description": "Function, returns String that used in the header of a field that has a grouping header around it, i.e. it's applicable to Objects, Arrays and Groups"
    },
    "lookupLabelRender": {
      "fullName": "Label Renderer function for lookups",
      "description": "Function, that allows to apply formatting for lookup labels"
    },
    "schemaName": {
      "fullName": "Schema name inside schema object",
      "description": "Used for convenience"
    },
    "fieldName": {
      "fullName": "Field name inside field object",
      "description": "Used for convenience"
    },
    "filter": {
      "fullName": "Filter name, i.e. one of keys used in 'metaschema.filters' object",
      "description": "Includes renderer (visual part) and where (mongodb query part)"
    },
    "generatorSpecification": {
      "fullName": "Generator Specification",
      "description": "Used in Synthetic Content Generator"
    },
    "order": {
      "type": "Number",
      "fullName": "Order",
      "description": "Sets value for formOrder, datagridOrder, detailedViewOrder fields if according field is not specified."
    },
    "formOrder": {
      "type": "Number",
      "fullName": "Form Order",
      "description": "Determines field order in form."
    },
    "datagridOrder": {
      "type": "Number",
      "fullName": "Datagrid Order",
      "description": "Determines field order in datagrid."
    },
    "detailedViewOrder": {
      "type": "Number",
      "fullName": "Detailed View Order",
      "description": "Determines field order in detailed view."
    },
    "indexes": {
      "fullName": "Indexes specification",
      "description": "Specification in format { 'anyKeyJustToDistinguishIndexSpecs': { keys, options } } is passed as createIndex(keys, options) for current collection. More info - https://docs.mongodb.com/manual/reference/method/db.collection.createIndex"
    },
    "showHeader": {
      "fullName": "Height Attribute of type=Grid",
      "description": "Allows to specify height of rendered table. Number, px"
    },
    "html": {
      "fullName": "Html attributes and properties",
      "description": "Allows to specify html attributes and properties, that should be mapped to corresponded field. Presented as key-val map, where key is action and val is map of attributes."
    },
    "softDelete": {
      "description": "Whether to use soft delete for schema records"
    },
    "cacheOptions": {
      "description": "Determines the way cache works for schema records"
    },
    "requiresRestart": {
      "description": "Whether env param requires restart to apply change"
    },
    "requiresLogout": {
      "description": "Whether env param requires user logout to apply change"
    },
    "canBeDefinedInDb": {
      "description": "Whether env param can be defined in db"
    },
    "collectionName": {
      "description": "Overrides collection where records are stored. Used for 'Schema' type."
    },
    "canBeDefinedInDatabase": {
      "description": "Used for _environment params."
    },
    "canBeDefinedInEnvironment": {
      "description": "Used for _environment params."
    },
    "includeWithBuildSchema": {
      "description": "Used for _environment params."
    },
    "group": {
      "description": "Used for _environment params."
    }
  }
}
