describe('V3 Backend Schema Routes', () => {
    before( function(done) {
        global.batchNumberField = {
            "generatorBatchNumber": {
                "type": "String",
                "visible": false,
                //"comment": "Do not set this to anything for real records, they may get wiped out as autogenerated otherwise",
                "generated": true,
                "fullName": "Generator Batch Number",
                "description": "Set to the ID of generator batch for synthetic records"
            }
        };
        global.expectedData = require("merge").recursive(true, expected, {fields: batchNumberField});
        done();
    });
    it('responds with correct schema for the model', function (done) {
        request(app)
            .get('/schema/model1s')
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .end(function (err, res) {
                res.statusCode.should.equal(200, JSON.stringify(res, null, 4));
                res.body.success.should.equal(true, res.body.message);
                assert(_.isEqual(res.body.data, expectedData), `Expected:\n${JSON.stringify(expectedData, null, 4)}\nGOT:\n${JSON.stringify(res.body.data, null, 4)}`);
                done();
            });
    });
    it('responds with correct schema for the 2nd level subschema', function (done) {
        request(app)
            .get('/schema/model1s/encounters')
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .end(function (err, res) {
                res.statusCode.should.equal(200, JSON.stringify(res, null, 4));
                res.body.success.should.equal(true, res.body.message);
                assert(_.isEqual(res.body.data, expected.fields.encounters), `Expected:\n${JSON.stringify(expectedData.fields.encounters, null, 4)}\nGOT:\n${JSON.stringify(res.body.data, null, 4)}`);
                done();
            });
    });
    it('responds with correct schema for the 3rd level subschema', function (done) {
        request(app)
            .get('/schema/model1s/encounters/diagnoses')
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .end(function (err, res) {
                res.statusCode.should.equal(200, JSON.stringify(res, null, 4));
                res.body.success.should.equal(true, res.body.message);
                assert(_.isEqual(res.body.data, expected.fields.encounters.fields.diagnoses), `Expected:\n${JSON.stringify(expectedData.fields.encounters.fields.diagnoses, null, 4)}\nGOT:\n${JSON.stringify(res.body.data, null, 4)}`);
                done();
            });
    });
    it('responds with correct schema for another 3rd level subschema', function (done) {
        request(app)
            .get('/schema/model1s/encounters/vitalSigns')
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .end(function (err, res) {
                res.statusCode.should.equal(200, JSON.stringify(res, null, 4));
                res.body.success.should.equal(true, res.body.message);
                assert(_.isEqual(res.body.data, expected.fields.encounters.fields.vitalSigns), `Expected:\n${JSON.stringify(expectedData.fields.encounters.fields.vitalSigns, null, 4)}\nGOT:\n${JSON.stringify(res.body.data, null, 4)}`);
                done();
            });
    });
});
