const puppeteer = require('puppeteer');

const {

  getLaunchOptions,
  loginWithUser,
  getUrlFor,
  form: {
    clickCreateNewButton,
    selectOptionByValue
  },
} = require('../../utils');

const selectors = {
  showSelect: 'div#s2id_showSelect',
  // showSelect: '[ng-field-name="showSelector"]',
  g1: '[group-name="g1"]',
  g2: '[group-name="g2"]',
  s1: '#s1',
  s2: '#s2',
  s3: '#s3',
};

const getVisibilitySnapshot = selectors => {
  const hasDomElement = selector => document.querySelector(selector) !== null;

  const isVisible = selector => {
    const el = document.querySelector(selector);
    console.log(el);

    if (el === null) {
      return false;
    }

    return el.parentOffset !== null;
  };

  return {
    showSelect: hasDomElement(selectors.showSelect),
    g1: isVisible(selectors.g1),
    g2: isVisible(selectors.g2),
    s1: hasDomElement(selectors.s1),
    s2: hasDomElement(selectors.s2),
    s3: hasDomElement(selectors.s3),
  };
};

describe('show expression', () => {
  beforeAll(async () => {
    this.browser = await puppeteer.launch(getLaunchOptions());
    this.context = await this.browser.createIncognitoBrowserContext();
    const page = await this.context.newPage();
    await loginWithUser(page);
    await page.close();
  });

  afterAll(async () => {
    await this.browser.close();
  });

  describe('show expression, context params for Groups', () => {
    beforeEach(async () => {
      this.page = await this.context.newPage();
      await this.page.goto(getUrlFor('helperMethods_showGroupsContextParams'));
      await clickCreateNewButton(this.page);
    });

    afterEach(async () => {
      await this.page.close();
    });

    test(
      'correct fields and groups visibility after form load on record create',
      async () => {
        const expectedSnapshot1 = {
          showSelect: true,
          g1: true,
          g2: false,
          s1: false,
          s2: false,
          s3: false,
        };

        await this.page.waitForSelector('.smart-form');
        await this.page.waitForSelector(selectors.g1);
        const snapshot1 = await this.page.evaluate(getVisibilitySnapshot, selectors);
        expect(snapshot1).toEqual(expectedSnapshot1);
      });
  });
});
